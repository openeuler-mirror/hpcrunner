[SERVER]
11.11.11.11

[DOWNLOAD]
octopus/11.4 https://octopus-code.org/download/11.4/octopus-11.4.tar.gz octopus-11.4.tar.gz

[DEPENDENCY]
module purge

./jarvis -install bisheng/2.4.0 com
module use ./software/modulefiles
module load bisheng/2.1.0

module purge
./jarvis -install kgcc/9.3.1 com
module use ./software/modulefiles

module load kgcc/9.3.1
export CC=`which gcc`
export CXX=`which g++`
export FC=`which gfortran`
./jarvis -install hmpi/1.1.1 gcc
./jarvis -install gsl/2.5 gcc
./jarvis -install lapack/3.10.1 gcc
./jarvis -install libxc/4.0.1 gcc





module load hmpi/1.1.1
export CC=`which mpicc`
export CXX=`which mpicxx`
export FC=`which mpifort`
export OPAL_PREFIX=$JARVIS_MPI/hmpi1.1.1-kgcc9.3.1/1.1.1
./jarvis -install fftw/3.3.8 gcc+mpi
./jarvis -install libvdwxc/0.4.0 gcc+mpi
tar -xvf ${JARVIS_DOWNLOAD}/octopus-11.4.tar.gz

[ENV]
module purge
module use ${JARVIS_ROOT}/software/modulefiles

module load kgcc/9.3.1


export OPAL_PREFIX=$JARVIS_MPI/hmpi1.1.1-bisheng2.4.0/1.1.1
module load lapack/3.10.1
module load gsl/2.5
module load libxc/4.0.1

module add bisheng/2.4.0
module load hmpi/1.1.1





[APP]
app_name = octopus
build_dir = ${JARVIS_ROOT}/octopus-11.4
binary_dir = ./software/apps/bisheng/octopus/11.4
case_dir =

[BUILD]


./configure CC=mpicc CXX=mpicxx FC=mpifort \
--prefix=${JARVIS_ROOT}/software/apps/bisheng/octopus/11.4 \
CFLAGS='-lgfortran'  \
FCFLAGS=' -lgfortran' \
--with-gsl-prefix==${JARVIS_LIBS}/kgcc9.3.1/gsl/2.5 \
--with-libxc-prefix=${JARVIS_LIBS}/kgcc9.3.1/libxc/4.0.1 \
--with-fftw-prefix=${JARVIS_LIBS}/kgcc9.3.1/hmpi1.1.1/fftw/3.3.8 \
--with-libvdwxc-prefix=${JARVIS_LIBS}/kgcc9.3.1/hmpi1.1.1/libvdwxc/4.0.0 \
--with-blas=${JARVIS_LIBS}/kgcc9.3.1/lapack/3.10.1/lib/librefblas.a \
--with-lapack=${JARVIS_LIBS}/kgcc9.3.1/lapack/3.10.1/lib/liblapack.a \
--enable-mpi \
--disable-zdotc-test




sed -i -e '0,/FINISHED/{s/FINISHED/FINISHED1/}' -e 's/(FINISHED/(FINISHED1/g' src/multisystem/propagator.F90
sed -i 's/type(\*)/type(c_ptr)/g' src/basic/cuda.F90
sed -i '0,/private/{s/private/\!private/}' src/basic/clock.F90
sed -i 's/FINISHED/FINISHED1/g' src/multisystem/system.F90
sed -i -e 's/test_clock_a .lt. test_clock_b/clock_is_earlier(test_clock_a,test_clock_b)/g' -e 's/test_clock_a .le. test_clock_b/clock_is_equal_or_earlier(test_clock_a,test_clock_b)/g' -e 's/test_clock_a .gt. test_clock_b/clock_is_later(test_clock_a,test_clock_b)/g' -e 's/test_clock_a .ge. test_clock_b/clock_is_equal_or_later(test_clock_a,test_clock_b)/g' -e 's/test_clock_a .eq. test_clock_b/clock_is_equal(test_clock_a,test_clock_b)/g' src/main/test.F90
sed -i '/SAFE_DEALLOCATE_P(systems)/s+^+!+g' src/main/run.F90
sed -i -e 's/cuda_memcpy_htod(this%mem, data(1)/cuda_memcpy_htod(this%mem, c_loc(data(1))/g' -e 's/cuda_memcpy_htod(this%mem, data(1, 1)/cuda_memcpy_htod(this%mem, c_loc(data(1, 1))/g' -e 's/cuda_memcpy_htod(this%mem, data(1, 1, 1)/cuda_memcpy_htod(this%mem, c_loc(data(1, 1, 1))/g' -e 's/cuda_memcpy_dtoh(this%mem, data(1)/cuda_memcpy_dtoh(this%mem, c_loc(data(1))/g' -e 's/cuda_memcpy_dtoh(this%mem, data(1, 1)/cuda_memcpy_dtoh(this%mem, c_loc(data(1, 1))/g' -e 's/cuda_memcpy_dtoh(this%mem, data(1, 1, 1)/cuda_memcpy_dtoh(this%mem, c_loc(data(1, 1, 1))/g' src/basic/accel_inc.F90

make -j
make install


[RUN]
run =
binary =
nodes = 1