[SERVER]
11.11.11.11

[DOWNLOAD]
relion/3.1.2 https://github.com/3dem/relion/archive/refs/tags/3.1.2.tar.gz relion-3.1.2.tar.gz 

[DEPENDENCY]
./jarvis -install package/hpckit/24.0.0/ any
module use software/utils/hpckit/24.0.0/HPCKit/24.12.30/modulefiles
module purge
module load bisheng/compiler4.1.0/bishengmodule bisheng/hmpi2.4.3/hmpi

export CC=mpicc CXX=mpicxx FC=mpifort

./jarvis -install fftw/3.3.8  clang+mpi

cd ${JARVIS_TMP}
rm -rf relion-3.1.2
tar -xvf ${JARVIS_DOWNLOAD}/relion-3.1.2.tar.gz


[ENV]
module purge
module use software/utils/hpckit/24.0.0/HPCKit/24.12.30/modulefiles
module load bisheng/compiler4.1.0/bishengmodule bisheng/hmpi2.4.3/hmpi
module use software/moduledeps/bisheng4.1.0-hmpi2.4.3/
module load fftw/3.3.8

export PATH=${JARVIS_ROOT}/software/apps/bisheng4.1.0-hmpi2.4.3/relion-3.1.2/bin:$PATH


[APP]
app_name = relion
build_dir = ${JARVIS_ROOT}/software/apps/bisheng4.1.0-hmpi2.4.3/relion-3.1.2
binary_dir =  ${JARVIS_ROOT}/software/apps/bisheng4.1.0-hmpi2.4.3/relion-3.1.2/bin
case_dir = ${JARVIS_ROOT}/case/relion_benchmark

[BUILD]

cd ${JARVIS_TMP}
cd relion-3.1.2
mkdir build && cd build

cmake  -DCMAKE_C_FLAGS="-g -O3  -fopenmp  -mllvm -force-customized-pipeline -mllvm -replace-sqrt-compare-by-square=true -fopenmp -mllvm -aarch64-enable-loop-data-prefetch=false -Wno-deprecated-declarations -msve-vector-bits=512 " -DCMAKE_CXX_FLAGS=" -g -O3  -fopenmp  -mllvm -force-customized-pipeline -mllvm -replace-sqrt-compare-by-square=true -fopenmp -mllvm -aarch64-enable-loop-data-prefetch=false -Wno-deprecated-declarations -msve-vector-bits=512"   -DFFTW_PATH=${KML_PATH}/include -DFFTW_INCLUDES=${KML_PATH}/include -DFFTW_LIBRARIES="${FFTW_PATH}/lib/libfftw3.so ${FFTW_PATH}/lib/libfftw3f.so"  -DCMAKE_INSTALL_PREFIX=${JARVIS_ROOT}/software/apps/bisheng4.1.0-hmpi2.4.3/relion-3.1.2 -DCUDA=OFF -DBUILD_SHARED_LIBS=OFF -DGUI=OFF -DFETCH_WEIGHTS=OFF -DFORCE_OWN_FFTW=OFF   -DALTCPU=ON -DCMAKE_BUILD_TYPE=release  ../

make -j
make install

[RUN]
run = 
binary = 
nodes = 1

[BATCH]
#定义日志文件
LOG_FILE="cesm-proformance.log"
#清空日志文件
>"$LOG_FILE"
#创建输出目录
mkdir -p class3d 

trdnum=8
mynp=16

#执行每个命令并统计性能
$RUN_TOOL "mpirun " "time -p mpirun --allow-run-as-root    --map-by ppr:${mynp}:node:pe=${trdnum} -x OMP_NUM_THREADS=${trdnum}   --bind-to core --rank-by core -x UCX_TLS=self,sm -mca pml ucx -mca btl ^vade,tcp,openib,uct relion_refine_mpi --j $trdnum  --gpu 0 -pool 100 --dont_combine_weights_via_disc --i Particles/shiny_2sets.star --ref emd_2660.map:mrc --firstiter_cc --ini_high 60 --ctf --ctf_corrected_ref --iter 25 --tau2_fudge 4 --particle_diameter 360 --K 6 --flatten_solvent --zero_mask --oversampling 1 --healpix_order 2 --offset_range 5 --offset_step 2 --sym C1 --norm --scale --random_seed 0 --maxsig 500 --fast_subsets --o class3d/test_1N_25it_32-4_1_1gp " $LOG_FILE




[JOB]
#!/bin/bash
#DSUB -n relion_test
#DSUB --mpi hmpi
#DSUB -N 1
#DSUB -R cpu=128
#DSUB -o relion.%J.out
#DSUB -e relion.%J.err


#定义日志文件
LOG_FILE="relion-proformance.log"

#清空日志文件
>"$LOG_FILE"

#执行每个命令并统计性能
$RUN_TOOL "mpirun " "time -p mpirun --allow-run-as-root  -np ${allnp}  --map-by ppr:${mynp}:node:pe=${trdnum} -x OMP_NUM_THREADS=${trdnum}   --bind-to core --rank-by core -x UCX_TLS=self,sm -mca pml ucx -mca btl ^vade,tcp,openib,uct relion_refine_mpi --j $trdnum  --gpu 0 -pool 100 --dont_combine_weights_via_disc --i Particles/shiny_2sets.star --ref emd_2660.map:mrc --firstiter_cc --ini_high 60 --ctf --ctf_corrected_ref --iter 25 --tau2_fudge 4 --particle_diameter 360 --K 6 --flatten_solvent --zero_mask --oversampling 1 --healpix_order 2 --offset_range 5 --offset_step 2 --sym C1 --norm --scale --random_seed 0 --maxsig 500 --fast_subsets --o class3d/test_1N_25it_32-4_1_1gp " $LOG_FILE
