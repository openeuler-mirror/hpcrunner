[SERVER]
11.11.11.11

[DOWNLOAD]
QuantumPackage/qp2/2.2.2

[DEPENDENCY]
set -e
module purge
./jarvis -install hpckit/25.0.0 any
module use ./software/utils/hpckit/25.0.0/HPCKit/latest/modulefiles
module load bisheng/compiler4.2.0/bishengmodule
module load bisheng/hmpi25.0.0/hmpi
module load bisheng/kml25.0.0/kml
module unload bisheng/kml25.0.0/kspblas/omp
module unload bisheng/kml25.0.0/kvml/serial
export CC=mpicc CXX=mpicxx FC=mpifort F77=mpif77 F90=mpif90
./jarvis -install python3/3.9.9 bisheng+mpi
module use ./software/moduledeps/bisheng4.2.0-hmpi25.0.0
module load python3/3.9.9
./jarvis -install hdf5/1.12.1/clang bisheng+mpi
module load hdf5-clang/1.12.1

mkdir -p ${JARVIS_ROOT}/software/apps/qp2
git clone https://github.com/QuantumPackage/qp2.git -b v2.2.2 ${JARVIS_ROOT}/software/apps/qp2
cd ${JARVIS_ROOT}/software/apps/qp2
git submodule update --init --recursive

[ENV]
module purge
module use ./software/utils/hpckit/25.0.0/HPCKit/latest/modulefiles
module load bisheng/compiler4.2.0/bishengmodule
module load bisheng/hmpi25.0.0/hmpi
module load bisheng/kml25.0.0/kml
module unload bisheng/kml25.0.0/kspblas/omp
module unload bisheng/kml25.0.0/kvml/serial
export CC=mpicc CXX=mpicxx FC=mpifort F77=mpif77 F90=mpif90
module use ./software/moduledeps/bisheng4.2.0-hmpi25.0.0
module load python3/3.9.9
module load hdf5-clang/1.12.1

[APP]
app_name = qp2
build_dir = ${JARVIS_ROOT}/software/apps/qp2
binary_dir = 
case_dir = ${JARVIS_ROOT}/software/apps/qp2

[BUILD]
sed -i 's/CC=gcc/CC=mpicc/g' configure
sed -i 's/CXX=g++/CXX=mpicxx/g' configure
# compiler zlib warning: -Wdeprecated-non-prototype
sed -i '328s/\(.\/configure\)/CFLAGS="-O3 -fPIC -Wno-deprecated-non-prototype" \1/' configure
# fix compiler zeromq error: ISO C++ requires the name after '::~generic_mtrie_t ()'
sed -i '282a\ sed -i \"s\/\\~generic_mtrie_t\/\\~generic_mtrie_t\<T\>\/\" src\/generic_mtrie_impl.hpp' configure
#If you don't have HDF5, use trexio-nohdf5,; use trexio need add --with-hdf5=$HDF5_PATH
sed -i '235s/$/\ CPPFLAGS="-I\${JARVIS_UTILS}\/hpckit\/25.0.0\/HPCKit\/25.0.0\/hmpi\/bisheng\/hmpi\/include" --with-hdf5=\${JARVIS_LIBS}\/bisheng4.2.0\/hmpi25.0.0\/hdf5-clang\/1.12.1/' configure
sed -i 's/make check \&\&//' configure
./configure -i zlib
./configure -i ninja
./configure -i zeromq
./configure -i trexio
./configure -i f77zmq
./configure -i gmp
./configure -i ocaml
./configure -i docopt
./configure -i resultsFile
cp -ar include/f77_zmq_free.h src/zmq/
cp -ar include/trexio_f.f90 src/trexio/

sed -i 's/zexp(/cexp(/g' src/ao_one_e_ints/one_e_Coul_integrals_cosgtos.irp.f
sed -i 's/zexp(/cexp(/g' src/utils/cpx_erf.irp.f
sed -i 's/zexp(/cexp(/g' src/utils/cgtos_utils.irp.f
sed -i 's/zsqrt(/csqrt(/g' src/ao_one_e_ints/one_e_Coul_integrals_cosgtos.irp.f
sed -i 's/zsqrt(/csqrt(/g' src/ao_two_e_ints/two_e_Coul_integrals_cosgtos.irp.f
sed -i 's/zsqrt(/csqrt(/g' src/utils/cgtos_one_e.irp.f
sed -i 's/zsqrt(/csqrt(/g' src/utils/cgtos_utils.irp.f
sed -i 's/derf(/erf(/g' src/utils/cpx_erf.irp.f
sed -i 's/derf(/erf(/g' src/utils/integration.irp.f
sed -i 's/derf(/erf(/g' src/utils/util.irp.f
sed -i 's/derf/erf/g' src/dft_utils_func/routines_exc_sr_lda.irp.f

cat > config/flang_hmpi.cfg <<EOF
@@[COMMON]
FC           : mpif90 -I . -I ${JARVIS_UTILS}/hpckit/25.0.0/HPCKit/25.0.0/hmpi/bisheng/hmpi/include -g -fPIC -std=legacy
LAPACK_LIB   : -L${JARVIS_UTILS}/hpckit/25.0.0/HPCKit/25.0.0/hmpi/bisheng/hmpi/lib -lmpi -lmpi_mpifh -L${JARVIS_UTILS}/hpckit/25.0.0/HPCKit/25.0.0/kml/bisheng/lib/noarch -lkm -lm -L${JARVIS_UTILS}/hpckit/25.0.0/HPCKit/25.0.0/kml/bisheng/lib/neon -L${JARVIS_UTILS}/hpckit/25.0.0/HPCKit/25.0.0/kml/bisheng/lib/neon/kblas/multi -lklapack_full -lkblas
IRPF90       : irpf90
IRPF90_FLAGS : --ninja --align=32 -DMPI -DSET_NESTED

@@[OPTION]
MODE    : OPT
CACHE   : 0
OPENMP  : 1

@@[OPT]
FCFLAGS : -Ofast

@@[PROFILE]
FC      : -p -g
FCFLAGS : -Ofast

@@[DEBUG]
FCFLAGS : -fcheck=all -g

@@[OPENMP]
FC           : -fopenmp
IRPF90_FLAGS : --openmp
EOF

sed -i 's/@@//g' config/flang_hmpi.cfg
source quantum_package.rc
./configure -c config/flang_hmpi.cfg
make

[CLEAN]
./bin/ninja clean

[RUN]
run = 
binary = source quantum_package.rc && cd tests/input/ && qp create_ezfio -b 6-31g be.xyz -o be && qp run fci | tee output.fic.out
nodes = 1
