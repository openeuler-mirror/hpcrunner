[SERVER]
11.11.11.11

[DOWNLOAD]
wrf/4.2 $JARVIS_PROXY/wrf-model/WRF/archive/refs/tags/v4.2.tar.gz wrf-4.2.tar.gz

[DEPENDENCY]
set -e
set -x
# basic system components
./CHECK_ROOT && yum install -y time.aarch64
module purge
module use ./software/modulefiles
./jarvis -install bisheng/2.5.0 com
module load bisheng/2.5.0
export CC=clang CXX=clang++ FC=flang
./jarvis -install jasper/1.900.2 clang
module load jasper/1.900.2
./jarvis -install hmpi/1.2.0 clang
module load hmpi/1.2.0
export CC=mpicc CXX=mpicxx FC=mpifort
./jarvis -install hdf5/1.12.0/clang clang+mpi
module load hdf5-clang/1.12.0
./jarvis -install pnetcdf/1.12.1 clang+mpi
module load pnetcdf/1.12.1
./jarvis -install netcdf/4.7.4/clang clang+mpi
module load netcdf-clang/4.7.4
./jarvis -install kml/1.7.0/bisheng clang
if [ ! -d "./WRF-4.2" ]; then
    tar -zxvf $JARVIS_DOWNLOAD/wrf-4.2.tar.gz
fi

[ENV]
#!/bin/bash
module purge
module use /hpcrunner/software/modulefiles
module load bisheng/2.5.0
module load jasper/1.900.2
module load hmpi/1.2.0
module load hdf5-clang/1.12.0 pnetcdf/1.12.1 netcdf-clang/4.7.4
module load kml-bisheng/1.7.0
export WRFIO_NCD_LARGE_FILE_SUPPORT=1
export NETCDF=$NETCDF_CLANG_PATH
export HDF5=$HDF5_CLANG_PATH
export PHDF5=$HDF5
export PNETCDF=$PNETCDF_PATH
export JASPER=$JASPER_PATH
export JASPERLIB=$JASPER_PATH/lib
export JASPREINC=$$JASPER_PATH/include
export CPPFLAGS="-I$HDF5/include -I$PNETCDF/include -I$NETCDF/include"
export LDFLAGS="-L$HDF5/lib -L$PNETCDF/lib -L$NETCDF/lib -lnetcdf -lnetcdff -lpnetcdf -lhdf5_hl -lhdf5 -lz"
export CC=mpicc CXX=mpicxx FC=mpif90 F77=mpif90 F90=mpif90
export WRF_DIR=$JARVIS_ROOT/WRF-4.2
export MPI_LIB="-L$MPI_LIB -lmpi -lomp"
export INCLUDE=$WRF_DIR/include:$INCLUDE
export WRFIO_NCD_LARGE_FILE_SUPPORT=1

[APP]
app_name = WRF
build_dir = ${WRF_DIR}
binary_dir = 
#case_dir = ${JARVIS_ROOT}/
case_dir = ${JARVIS_ROOT}/workloads/conus12km/

[BUILD]
cat << \EOF > ./arch/configure.defaults
###########################################################
#ARCH   Linux   aarch64,clang HYPERMPI#serial smpar dmpar dm+sm
DESCRIPTION     =       CLANG ($SFC/$SCC)
DMPARALLEL      =       1
OMPCPP          =       -D_OPENMP
OMP             =       -fopenmp
OMPCC           =       -fopenmp
SFC             =       flang
SCC             =       clang
CCOMP           =       clang
DM_FC           =       mpif90 -f90=$(SFC)
DM_CC           =       mpicc -cc=$(SCC) -DMPI2_SUPPORT
FC              =       CONFIGURE_FC
CC              =       CONFIGURE_CC
LD              =       $(FC) -L$(KML_BISHENG_PATH)/lib -lkm
RWORDSIZE       =       CONFIGURE_RWORDSIZE
PROMOTION       =       #-fdefault-real-8
ARCH_LOCAL      =       -DNONSTANDARD_SYSTEM_SUBR  -DWRF_USE_CLM
CFLAGS_LOCAL    =      -mcpu=native -w -O3 -c -march=armv8.2-a
LDFLAGS_LOCAL   =
CPLUSPLUSLIB    =
ESMF_LDFLAG     =      $(CPLUSPLUSLIB)
FCOPTIM         =       -O3 -march=armv8.2-a
FCREDUCEDOPT    =       $(FCOPTIM)
FCNOOPT         =       -O0
FCDEBUG         =      -g # -fbacktrace -ggdb-fcheck=bounds,do,mem,pointer -ffpe-trap=invalid,zero,overflow
FORMAT_FIXED    =       -ffixed-form
FORMAT_FREE     =       -ffree-form -ffree-line-length-0
FCSUFFIX        =
BYTESWAPIO      =       -fconvert=big-endian
FCBASEOPTS_NO_G =       -w $(FORMAT_FREE) $(BYTESWAPIO)
FCBASEOPTS      =       -mcpu=native $(OMP) $(FCBASEOPTS_NO_G)
MODULE_SRCH_FLAG =
TRADFLAG        =      -traditional
CPP             =      /lib/cpp -P
AR              =      ar
ARFLAGS         =      ru
M4              =      m4 -G
RANLIB          =      ranlib
RLFLAGS         =
CC_TOOLS        =      $(SCC)

#insert new stanza before the Fujitsu block, keep Fujitsu at the end of the list
###########################################################
#ARCH  NULL
EOF
sed -i 's/derf/erf/g' ./phys/module_mp_SBM_polar_radar.F
echo 4 | ./configure
./compile -j 64 em_real 2>&1 | tee compile.log 

[CLEAN]
./clean

[RUN]
run = mpirun --allow-run-as-root -n 32 -x OMP_NUM_THREADS=1 -bind-to core $WRF_DIR/run/wrf.exe
binary = 
nodes = 1

[JOB]
#!/bin/sh
#DSUB -n wrf_test
#DSUB --job_type cosched:hmpi
#DSUB -A root.default
#DSUB -q root.default
#DSUB -N 1
#DSUB -R cpu=128
#DSUB -oo wrf.%J.out
#DSUB -eo wrf.%J.err

##set runtime environment variables

ulimit -s unlimited
ulimit -c unlimited
rm -rf rsl.*
echo "----HOSTFILE generated---"
cat $CCS_HOST_FILE
echo "-------------------------"
EXEC_CMD="time -p mpirun $CCS_MPI_OPTIONS -n 32 -x OMP_NUM_THREADS=1 -x UCX_NET_DEVICES=mlx5_0:1 -mca io romio321 -mca pml ucx -mca btl ^vader,tcp,openib,uct -x UCX_TLS=self,sm,rc -bind-to core -x PATH -x LD_LIBRARY_PATH $WRF_DIR/run/wrf.exe"
echo "$EXEC_CMD"
date
$EXEC_CMD
date