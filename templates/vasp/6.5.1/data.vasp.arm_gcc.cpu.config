[SERVER]
11.11.11.11

[DOWNLOAD]

[DEPENDENCY]
set -e
set -x
module purge
./jarvis -install fftw/yum com
if [[ $UseLatest -eq 1 ]]; then
    HPCKit_Version=latest
else
    HPCKit_Version=25.0.0
fi
./jarvis -install hpckit/${HPCKit_Version}/ any
cd ${JARVIS_TMP}
rm -rf ${JARVIS_TMP}/vasp.6.5.1
tar xf ${JARVIS_DOWNLOAD}/vasp.6.5.1.tgz



[ENV]
set -e
set -x
module purge

if [[ $UseLatest -eq 1 ]]; then
    HPCKit_Version=latest
else
    HPCKit_Version=25.0.0
fi
GCC_VERSION=`ls software/utils/hpckit/${HPCKit_Version}/HPCKit/${HPCKit_Version}/modulefiles/gcc|grep compiler|awk -F "compiler" '{print $2}'`
HMPI_VERSION=`ls software/utils/hpckit/${HPCKit_Version}/HPCKit/${HPCKit_Version}/modulefiles/gcc|grep hmpi|awk -F "hmpi" '{print $2}'`
module use software/utils/hpckit/${HPCKit_Version}/HPCKit/${HPCKit_Version}/modulefiles
module load gcc/compiler${GCC_VERSION}/gccmodule
module load gcc/hmpi${HMPI_VERSION}
module load gcc/kml${HMPI_VERSION}/kml
module load gcc/kml${HMPI_VERSION}/kblas/multi
export HPCKIT_PATH=$JARVIS_UTILS/hpckit/${HMPI_VERSION}
export KML_LIB=${HPCKIT_PATH}/HPCKit/${HMPI_VERSION}/kml/gcc/lib
export KML_PATH=${HPCKIT_PATH}/HPCKit/${HMPI_VERSION}/kml
export LD_LIBRARY_PATH=${KML_LIB}/noarch:${KML_LIB}/${kp}:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=${KML_LIB}/${kp}/kblas/multi:$LD_LIBRARY_PATH
export kml_path="-L${HPCKIT_PATH}/HPCKit/${HMPI_VERSION}/kml/gcc/lib/${kp} -lkm -lkm_l9"
export kml_inc=${HPCKIT_PATH}/HPCKit/${HMPI_VERSION}/kml/gcc/include
export blas_path="-L${HPCKIT_PATH}/HPCKit/${HMPI_VERSION}/kml/gcc/lib/${kp}/kblas/multi -lkblas"
export fftw_path="-L${HPCKIT_PATH}/HPCKit/${HMPI_VERSION}/kml/gcc/lib/${kp} -lkfft -lfftw3"
export scalapack_path="-L${HPCKIT_PATH}/HPCKit/${HMPI_VERSION}/kml/gcc/lib/${kp}/ -lkscalapack -lkscalapack_full -lklapack_full -lkservice"

[APP]
app_name = VASP
build_dir = ${JARVIS_TMP}/vasp.6.5.1
binary_dir = ${JARVIS_TMP}/vasp.6.5.1/bin
case_dir =

[BUILD]
cat > makefile.include << EOF
# Default precompiler options
CPP_OPTIONS = -DHOST=\"LinuxGNU\" \\
              -DMPI -DMPI_BLOCK=8000 -Duse_collective \\
              -DscaLAPACK \\
              -DCACHE_SIZE=5000 \\
              -Davoidalloc \\
              -Dvasp6 \\
              -Dtbdyn \\
              -Dfock_dblbuf

CPP         = gcc -E -C -w \$*\$(FUFFIX) >\$*\$(SUFFIX) \$(CPP_OPTIONS)

FC          = mpif90
FCL         = mpif90

FREE        = -ffree-form -ffree-line-length-none

FFLAGS      = -w -ffpe-summary=none

OFLAG       = -O2
OFLAG_IN    = \$(OFLAG)
DEBUG       = -O0

# For what used to be vasp.5.lib
CPP_LIB     = \$(CPP)
FC_LIB      = \$(FC)
CC_LIB      = gcc
CFLAGS_LIB  = -O
FFLAGS_LIB  = -O1
FREE_LIB    = \$(FREE)

OBJECTS_LIB = linpack_double.o

# For the parser library
CXX_PARS    = g++
LLIBS       = -lstdc++

##
## Customize as of this point! Of course you may change the preceding
## part of this file as well if you like, but it should rarely be
## necessary ...
##

# When compiling on the target machine itself, change this to the
# relevant target when cross-compiling for another architecture
VASP_TARGET_CPU ?= -march=native
FFLAGS     += \$(VASP_TARGET_CPU)

# For gcc-10 and higher (comment out for older versions)
FFLAGS     += -fallow-argument-mismatch

# BLAS and LAPACK and scaLAPACK (mandatory)
LLIBS      += \$(blas_path) \$(scalapack_path)

# FFTW (mandatory)
LLIBS      += \$(fftw_path)
INCS       += -I\$(kml_inc) -I/usr/include
EOF

echo `pwd`
make DEPS=1 -j all

[CLEAN]
make veryclean

[RUN]
run = mpirun --allow-run-as-root -np 32 -x OMP_NUM_THREADS=1
binary = vasp_std 2>&1 | tee -a vasp.out
nodes = 1